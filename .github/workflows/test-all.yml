name: test-all

on:
  schedule:
    - cron: '0 1 * * *'   # 1 AM UTC daily
  repository_dispatch:
    types: [unikraft_pr]  # Triggered by external PRs in the unikraft repository
  workflow_dispatch:      # Manual trigger

jobs:
  test-all:
    timeout-minutes: 90
    runs-on: ubuntu-latest
    steps:
      # Initial checkout of main to get workflow scripts
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      # Parse repository information from the dispatch event
      - name: Parse Repository Info
        if: github.event_name == 'repository_dispatch'
        id: parse_repo
        run: bash .github/scripts/utils/parse-repo.sh "${{ github.event.client_payload.pr_repo }}"

      # Generate a GitHub App token for authentication
      # This is required to create and update check runs on the target repository
      - name: Generate GitHub App Token
        if: github.event_name == 'repository_dispatch'
        id: generate_token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ vars.APP_ID }}  # GitHub App ID stored in repository variables
          private-key: ${{ secrets.PRIVATE_KEY }}  # Private key stored in repository secrets
          owner: ${{ steps.parse_repo.outputs.owner }}
          repositories: ${{ steps.parse_repo.outputs.repo }}

      # Create an initial check run to indicate tests are starting
      # This check run will be updated later with the final results
      - name: Create Initial Check Run
        if: github.event_name == 'repository_dispatch'
        uses: octokit/request-action@v2.x
        id: create_check
        with:
          route: POST /repos/{owner}/{repo}/check-runs
          owner: ${{ steps.parse_repo.outputs.owner }}
          repo: ${{ steps.parse_repo.outputs.repo }}
          name: "Catalog Core Tests"
          head_sha: ${{ github.event.client_payload.pr_sha }}
          status: 'in_progress'
          started_at: ${{ github.event.client_payload.start_time }}
          output: |
            {
              "title": "Tests are running...",
              "summary": "The Unikraft Catalog Core tests have been triggered. [View Progress](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            }
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}

      # Checkout the test branch
      # This branch contains the test scripts and configurations
      - name: Checkout test branch
        uses: actions/checkout@v4
        with:
          ref: test

      # Pull in the workflow specific scripts from main
      # Having to sync the .github directory from main would be redundant
      - name: Pull .github scripts from main
        uses: actions/checkout@v4
        with:
          ref: main  # Make sure to pull from main
          path: temp-main  # Isolate this checkout
          sparse-checkout: |  # Only checkout the scripts directory
            .github/scripts
          sparse-checkout-cone-mode: false  # Disable cone mode for sparse checkout

      # Copy the just pulled scripts to the current workspace
      - name: Copy scripts to workspace
        run: |
          mkdir -p .github/scripts
          cp -r temp-main/.github/scripts/* .github/scripts/
          rm -rf temp-main

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Enable Docker Buildkit
        run: bash .github/scripts/setup/docker-setup.sh

      - name: Install Base Dependencies
        run: bash .github/scripts/setup/base-dependencies.sh

      - name: Install Firecracker
        run: bash .github/scripts/setup/firecracker-setup.sh

      - name: Setup QEMU Networking
        run: bash .github/scripts/setup/qemu-setup.sh

      # In case of a repository dispatch event, checkout to the PR branch
      # This allows testing of the specific PR changes
      - name: Checkout unikraft PR Branch
        if: github.event_name == 'repository_dispatch'
        run: bash .github/scripts/utils/use-pull-request.sh repos/unikraft "${{ github.event.client_payload.pr_repo }}" "${{ github.event.client_payload.pr_number }}"

      - name: Run Tests
        id: run-tests
        run: bash .github/scripts/tests/run-tests.sh

      - name: Get the Completion Time
        id: completion_time
        run: echo "completion_time=$(date -u +"%Y-%m-%dT%H:%M:%SZ")" >> "$GITHUB_OUTPUT"

      # Update the initial check run with the final results
      # This provides feedback on the PR about the test outcomes
      - name: Update Final Check Run
        if: always() && github.event_name == 'repository_dispatch'
        uses: octokit/request-action@v2.x
        with:
          route: PATCH /repos/{owner}/{repo}/check-runs/{check_run_id}
          owner: ${{ steps.parse_repo.outputs.owner }}
          repo: ${{ steps.parse_repo.outputs.repo }}
          check_run_id: ${{ fromJson(steps.create_check.outputs.data).id }}
          status: 'completed'
          conclusion: ${{ steps.run-tests.outputs.result || job.status }}
          started_at: ${{ github.event.client_payload.start_time }}
          completed_at: ${{ steps.completion_time.outputs.completion_time }}
          output: |
            {
              "title": "Test run complete: ${{ steps.run-tests.outputs.result_upper || (job.status == 'cancelled' && 'CANCELLED' || 'FAILED') }}",
              "summary": "The Catalog Core tests have finished. [View Full Logs](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})"
            }
        env:
          GITHUB_TOKEN: ${{ steps.generate_token.outputs.token }}

      - name: Generate Workflow Summary
        if: always()
        run: bash .github/scripts/utils/generate-summary.sh

      - name: Archive test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: catalog-core-test-logs-${{ github.run_id }}
          path: |
            output.log
            */scripts/test/log/*
          retention-days: 7
